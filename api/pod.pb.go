// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pod.proto

/*
Package pod is a generated protocol buffer package.

It is generated from these files:
	pod.proto

It has these top-level messages:
	PodInfoRequest
	PodInfo
	HealthStatusRequest
	HealthStatus
*/
package pod

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// *
// Request for pod info
type PodInfoRequest struct {
}

func (m *PodInfoRequest) Reset()                    { *m = PodInfoRequest{} }
func (m *PodInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*PodInfoRequest) ProtoMessage()               {}
func (*PodInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// *
// Return for pod info request
type PodInfo struct {
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *PodInfo) Reset()                    { *m = PodInfo{} }
func (m *PodInfo) String() string            { return proto.CompactTextString(m) }
func (*PodInfo) ProtoMessage()               {}
func (*PodInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PodInfo) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

// *
// Request for health status
type HealthStatusRequest struct {
}

func (m *HealthStatusRequest) Reset()                    { *m = HealthStatusRequest{} }
func (m *HealthStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*HealthStatusRequest) ProtoMessage()               {}
func (*HealthStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// *
// Replies on health
type HealthStatus struct {
	IsOK bool `protobuf:"varint,1,opt,name=isOK" json:"isOK,omitempty"`
}

func (m *HealthStatus) Reset()                    { *m = HealthStatus{} }
func (m *HealthStatus) String() string            { return proto.CompactTextString(m) }
func (*HealthStatus) ProtoMessage()               {}
func (*HealthStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *HealthStatus) GetIsOK() bool {
	if m != nil {
		return m.IsOK
	}
	return false
}

func init() {
	proto.RegisterType((*PodInfoRequest)(nil), "pod.PodInfoRequest")
	proto.RegisterType((*PodInfo)(nil), "pod.PodInfo")
	proto.RegisterType((*HealthStatusRequest)(nil), "pod.HealthStatusRequest")
	proto.RegisterType((*HealthStatus)(nil), "pod.HealthStatus")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PodMessagingService service

type PodMessagingServiceClient interface {
	// *
	// health status
	Health(ctx context.Context, in *HealthStatusRequest, opts ...grpc.CallOption) (*HealthStatus, error)
	PodInfo(ctx context.Context, in *PodInfoRequest, opts ...grpc.CallOption) (*PodInfo, error)
}

type podMessagingServiceClient struct {
	cc *grpc.ClientConn
}

func NewPodMessagingServiceClient(cc *grpc.ClientConn) PodMessagingServiceClient {
	return &podMessagingServiceClient{cc}
}

func (c *podMessagingServiceClient) Health(ctx context.Context, in *HealthStatusRequest, opts ...grpc.CallOption) (*HealthStatus, error) {
	out := new(HealthStatus)
	err := grpc.Invoke(ctx, "/pod.PodMessagingService/Health", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podMessagingServiceClient) PodInfo(ctx context.Context, in *PodInfoRequest, opts ...grpc.CallOption) (*PodInfo, error) {
	out := new(PodInfo)
	err := grpc.Invoke(ctx, "/pod.PodMessagingService/podInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PodMessagingService service

type PodMessagingServiceServer interface {
	// *
	// health status
	Health(context.Context, *HealthStatusRequest) (*HealthStatus, error)
	PodInfo(context.Context, *PodInfoRequest) (*PodInfo, error)
}

func RegisterPodMessagingServiceServer(s *grpc.Server, srv PodMessagingServiceServer) {
	s.RegisterService(&_PodMessagingService_serviceDesc, srv)
}

func _PodMessagingService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodMessagingServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pod.PodMessagingService/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodMessagingServiceServer).Health(ctx, req.(*HealthStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodMessagingService_PodInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodMessagingServiceServer).PodInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pod.PodMessagingService/PodInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodMessagingServiceServer).PodInfo(ctx, req.(*PodInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PodMessagingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pod.PodMessagingService",
	HandlerType: (*PodMessagingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _PodMessagingService_Health_Handler,
		},
		{
			MethodName: "podInfo",
			Handler:    _PodMessagingService_PodInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pod.proto",
}

func init() { proto.RegisterFile("pod.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0xc8, 0x4f, 0xd1,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0xc8, 0x4f, 0x91, 0xd2, 0x01, 0xb3, 0x93, 0x75,
	0xd3, 0x53, 0xf3, 0x74, 0x8b, 0xcb, 0x13, 0xd3, 0xd3, 0x53, 0x8b, 0xf4, 0xf3, 0x0b, 0x4a, 0x32,
	0xf3, 0xf3, 0x8a, 0xf5, 0x13, 0xf3, 0xf2, 0xf2, 0x4b, 0x12, 0xc1, 0x6c, 0x88, 0x16, 0x25, 0x01,
	0x2e, 0xbe, 0x80, 0xfc, 0x14, 0xcf, 0xbc, 0xb4, 0xfc, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12,
	0x25, 0x49, 0x2e, 0x76, 0xa8, 0x88, 0x10, 0x1f, 0x17, 0x93, 0xa7, 0x8b, 0x04, 0xa3, 0x02, 0xa3,
	0x06, 0x67, 0x10, 0x93, 0xa7, 0x8b, 0x92, 0x28, 0x97, 0xb0, 0x47, 0x6a, 0x62, 0x4e, 0x49, 0x46,
	0x70, 0x49, 0x62, 0x49, 0x69, 0x31, 0x4c, 0x87, 0x12, 0x17, 0x0f, 0xb2, 0xb0, 0x90, 0x10, 0x17,
	0x4b, 0x66, 0xb1, 0xbf, 0x37, 0x58, 0x23, 0x47, 0x10, 0x98, 0x6d, 0x54, 0xc7, 0x25, 0x1c, 0x90,
	0x9f, 0xe2, 0x9b, 0x5a, 0x5c, 0x9c, 0x98, 0x9e, 0x99, 0x97, 0x1e, 0x9c, 0x5a, 0x54, 0x96, 0x99,
	0x9c, 0x2a, 0x64, 0xce, 0xc5, 0x06, 0xd1, 0x2a, 0x24, 0xa1, 0x07, 0xf2, 0x07, 0x16, 0xe3, 0xa5,
	0x04, 0x31, 0x64, 0x94, 0x18, 0x84, 0xf4, 0xb8, 0xd8, 0x0b, 0xa0, 0xae, 0x14, 0x06, 0xcb, 0xa3,
	0xfa, 0x42, 0x8a, 0x07, 0x59, 0x50, 0x89, 0x21, 0x89, 0x0d, 0xec, 0x5d, 0x63, 0x40, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xe0, 0x63, 0x9e, 0xdd, 0x2e, 0x01, 0x00, 0x00,
}
